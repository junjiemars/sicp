
(defun element-of-set? (x set)
  (cond ((or (null set)
             (< x (car set))) nil)
        ((= x (car set)) t)
        ((element-of-set? x (cdr set)))))

(defun adjoin-set (x set)
  (cond ((or (null set)
             (< x (car set)))
         (cons x set))
        ((= x (car set)) set)
        ((cons (car set)
               (adjoin-set x (cdr set))))))

(defun union-set (set1 set2)
  (cond ((null set1) set2)
        ((union-set (cdr set1)
                    (adjoin-set (car set1) set2)))))

(defun intersection-set (set1 set2)
  (cond ((or (null set1) (null set2)) nil)
        ((let ((x1 (car set1))
               (x2 (car set2)))
           (cond ((= x1 x2)
                  (cons x1 (intersection-set (cdr set1)
                                             (cdr set2))))
                 ((< x1 x2)
                  (intersection-set (cdr set1) set2))
                 ((intersection-set set1 (cdr set2))))))))
